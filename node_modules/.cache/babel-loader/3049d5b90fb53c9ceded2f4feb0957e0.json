{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport getLanguageField from './getLanguageField';\nimport localizeTextField from './localizeTextField';\nimport Base from '../Base/Base';\nvar SUPPORTED_LANGUAGES = ['en', 'es', 'fr', 'de', 'ru', 'zh', 'pt', 'ar', 'ja', 'ko', 'mul'];\nvar LanguageControl = /*#__PURE__*/function (_Base) {\n  function LanguageControl(options) {\n    var _this;\n    _classCallCheck(this, LanguageControl);\n    var _a, _b, _c;\n    _this = _callSuper(this, LanguageControl);\n    _this.supportedLanguages = (_a = options === null || options === void 0 ? void 0 : options.supportedLanguages) !== null && _a !== void 0 ? _a : SUPPORTED_LANGUAGES;\n    _this.language = options === null || options === void 0 ? void 0 : options.language;\n    _this.getLanguageField = (_b = options === null || options === void 0 ? void 0 : options.getLanguageField) !== null && _b !== void 0 ? _b : getLanguageField;\n    _this.excludedLayerIds = (_c = options === null || options === void 0 ? void 0 : options.excludedLayerIds) !== null && _c !== void 0 ? _c : [];\n    _this.styleChangeListener = _this.styleChangeListener.bind(_this);\n    return _this;\n  }\n  _inherits(LanguageControl, _Base);\n  return _createClass(LanguageControl, [{\n    key: \"onAddControl\",\n    value: function onAddControl() {\n      this.map.on('styledata', this.styleChangeListener);\n    }\n  }, {\n    key: \"onRemoveControl\",\n    value: function onRemoveControl() {\n      this.map.off('styledata', this.styleChangeListener);\n    }\n  }, {\n    key: \"styleChangeListener\",\n    value: function styleChangeListener() {\n      this.map.off('styledata', this.styleChangeListener);\n      this.setLanguage(this.language);\n    }\n  }, {\n    key: \"setLanguage\",\n    value: function setLanguage() {\n      var _this2 = this;\n      var lang = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.browserLanguage();\n      var language = this.supportedLanguages.indexOf(lang) < 0 ? 'mul' : lang;\n      var style = this.map.getStyle();\n      var languageField = this.getLanguageField(language);\n      var layers = style.layers.map(function (layer) {\n        if (layer.type !== 'symbol') return layer;\n        if (!layer.layout || !layer.layout['text-field']) return layer;\n        if (_this2.excludedLayerIds.indexOf(layer.id) !== -1) return layer;\n        var textField = layer.layout['text-field'];\n        var textFieldLocalized = localizeTextField(textField, languageField);\n        return Object.assign(Object.assign({}, layer), {\n          layout: Object.assign(Object.assign({}, layer.layout), {\n            'text-field': textFieldLocalized\n          })\n        });\n      });\n      this.map.setStyle(Object.assign(Object.assign({}, style), {\n        layers: layers\n      }));\n    }\n  }, {\n    key: \"browserLanguage\",\n    value: function browserLanguage() {\n      var language = navigator.languages ? navigator.languages[0] : navigator.language;\n      var parts = language.split('-');\n      var languageCode = parts.length > 1 ? parts[0] : language;\n      if (this.supportedLanguages.indexOf(languageCode) > -1) return languageCode;\n      return 'mul';\n    }\n  }]);\n}(Base);\nexport { LanguageControl as default };","map":null,"metadata":{},"sourceType":"module"}