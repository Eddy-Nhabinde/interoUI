{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nvar IImage = /*#__PURE__*/function () {\n  function IImage() {\n    _classCallCheck(this, IImage);\n  }\n  return _createClass(IImage, [{\n    key: \"loadFile\",\n    value: function loadFile(file) {\n      var _this = this;\n      return new Promise(function (resolve, reject) {\n        var reader = new FileReader();\n        var node = new Image();\n        reader.addEventListener('load', function () {\n          var imageUrl = reader.result;\n          node.onload = function () {\n            _this.id = file.name;\n            _this.url = imageUrl;\n            _this.width = node.width;\n            _this.height = node.height;\n            resolve(_this);\n          };\n          node.onerror = reject;\n          node.src = imageUrl;\n        }, false);\n        reader.readAsDataURL(file);\n      });\n    }\n  }, {\n    key: \"loadUrl\",\n    value: function loadUrl(url) {\n      var _this2 = this;\n      return new Promise(function (resolve, reject) {\n        var node = new Image();\n        node.onload = function () {\n          _this2.id = url.split('/').pop();\n          _this2.url = url;\n          _this2.width = node.width;\n          _this2.height = node.height;\n          resolve(_this2);\n        };\n        node.onerror = reject;\n        node.src = url;\n      });\n    }\n  }, {\n    key: \"setInitialPosition\",\n    value: function setInitialPosition(map) {\n      if (!this.width || !this.height) throw Error('image is not loaded');\n      var padding = 20;\n      var mapCanvas = map.getCanvas();\n      var canvasWidth = mapCanvas.offsetWidth;\n      var canvasHeight = mapCanvas.offsetHeight;\n      var maxWidth = canvasWidth - padding * 2;\n      var maxHeight = canvasHeight - padding * 2;\n      var ratio = Math.min(maxWidth / this.width, maxHeight / this.height);\n      var resizeWidth = this.width * ratio;\n      var resizeHeight = this.height * ratio;\n      var result = [[canvasWidth / 2 - resizeWidth / 2, canvasHeight / 2 - resizeHeight / 2], [canvasWidth / 2 + resizeWidth / 2, canvasHeight / 2 - resizeHeight / 2], [canvasWidth / 2 + resizeWidth / 2, canvasHeight / 2 + resizeHeight / 2], [canvasWidth / 2 - resizeWidth / 2, canvasHeight / 2 + resizeHeight / 2] // left bottom\n      ];\n      map.setPitch(0); // reset pitch for correct projection\n      this.position = result.map(function (point) {\n        return map.unproject(point);\n      });\n    }\n  }, {\n    key: \"coordinates\",\n    get: function get() {\n      return this.position.map(function (p) {\n        return [p.lng, p.lat];\n      });\n    }\n  }, {\n    key: \"asPolygon\",\n    get: function get() {\n      return {\n        type: 'FeatureCollection',\n        features: [{\n          type: 'Feature',\n          properties: {\n            id: this.id\n          },\n          geometry: {\n            type: 'Polygon',\n            coordinates: [[].concat(_toConsumableArray(this.coordinates), [this.coordinates[0]])]\n          }\n        }]\n      };\n    }\n  }, {\n    key: \"asPoints\",\n    get: function get() {\n      return {\n        type: 'FeatureCollection',\n        features: this.coordinates.map(function (point, i) {\n          return {\n            type: 'Feature',\n            properties: {\n              index: i\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: point\n            }\n          };\n        })\n      };\n    }\n  }, {\n    key: \"imageSource\",\n    get: function get() {\n      return {\n        id: \"\".concat(this.id, \"-raster\"),\n        source: {\n          type: 'image',\n          url: this.url,\n          coordinates: this.coordinates\n        }\n      };\n    }\n  }, {\n    key: \"polygonSource\",\n    get: function get() {\n      return {\n        id: \"\".concat(this.id, \"-polygon\"),\n        source: {\n          type: 'geojson',\n          data: this.asPolygon\n        }\n      };\n    }\n  }, {\n    key: \"cornersSource\",\n    get: function get() {\n      return {\n        id: \"\".concat(this.id, \"-corners\"),\n        source: {\n          type: 'geojson',\n          data: this.asPoints\n        }\n      };\n    }\n  }, {\n    key: \"rasterLayer\",\n    get: function get() {\n      return {\n        id: \"\".concat(this.id, \"-raster\"),\n        type: 'raster',\n        source: this.imageSource.id,\n        paint: {\n          'raster-fade-duration': 0,\n          'raster-opacity': 0.5\n        }\n      };\n    }\n  }, {\n    key: \"fillLayer\",\n    get: function get() {\n      return {\n        id: \"\".concat(this.id, \"-fill\"),\n        type: 'fill',\n        source: this.polygonSource.id,\n        paint: {\n          'fill-opacity': 0\n        }\n      };\n    }\n  }, {\n    key: \"ratio\",\n    get: function get() {\n      return this.width / this.height;\n    }\n  }, {\n    key: \"getOppositePoint\",\n    value: function getOppositePoint(index) {\n      if (index === 0) return 2;\n      if (index === 1) return 3;\n      if (index === 2) return 0;\n      if (index === 3) return 1;\n      throw Error('invalid corner index');\n    }\n  }]);\n}();\nexport default IImage;","map":null,"metadata":{},"sourceType":"module"}