{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"type\", \"name\", \"value\", \"onChange\", \"vertical\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport invariant from 'invariant';\nimport { useUncontrolled } from 'uncontrollable';\nimport chainFunction from './createChainedFunction';\nimport { map } from './ElementChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ToggleButtonGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n      value: 'onChange'\n    }),\n    children = _useUncontrolled.children,\n    _useUncontrolled$type = _useUncontrolled.type,\n    type = _useUncontrolled$type === void 0 ? 'radio' : _useUncontrolled$type,\n    name = _useUncontrolled.name,\n    value = _useUncontrolled.value,\n    onChange = _useUncontrolled.onChange,\n    _useUncontrolled$vert = _useUncontrolled.vertical,\n    vertical = _useUncontrolled$vert === void 0 ? false : _useUncontrolled$vert,\n    controlledProps = _objectWithoutProperties(_useUncontrolled, _excluded);\n  var getValues = function getValues() {\n    return value == null ? [] : [].concat(value);\n  };\n  var handleToggle = function handleToggle(inputVal, event) {\n    if (!onChange) {\n      return;\n    }\n    var values = getValues();\n    var isActive = values.indexOf(inputVal) !== -1;\n    if (type === 'radio') {\n      if (!isActive) onChange(inputVal, event);\n      return;\n    }\n    if (isActive) {\n      onChange(values.filter(function (n) {\n        return n !== inputVal;\n      }), event);\n    } else {\n      onChange([].concat(_toConsumableArray(values), [inputVal]), event);\n    }\n  };\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n  return /*#__PURE__*/_jsx(ButtonGroup, _objectSpread(_objectSpread({}, controlledProps), {}, {\n    ref: ref,\n    vertical: vertical,\n    children: map(children, function (child) {\n      var values = getValues();\n      var _child$props = child.props,\n        childVal = _child$props.value,\n        childOnChange = _child$props.onChange;\n      var handler = function handler(e) {\n        return handleToggle(childVal, e);\n      };\n      return /*#__PURE__*/React.cloneElement(child, {\n        type: type,\n        name: child.name || name,\n        checked: values.indexOf(childVal) !== -1,\n        onChange: chainFunction(childOnChange, handler)\n      });\n    })\n  }));\n});\nexport default Object.assign(ToggleButtonGroup, {\n  Button: ToggleButton\n});","map":null,"metadata":{},"sourceType":"module"}