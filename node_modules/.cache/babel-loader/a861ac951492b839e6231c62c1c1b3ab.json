{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport Base from '../Base/Base';\nvar TooltipControl = /*#__PURE__*/function (_Base) {\n  function TooltipControl(options) {\n    var _this;\n    _classCallCheck(this, TooltipControl);\n    _this = _callSuper(this, TooltipControl);\n    if (typeof (options === null || options === void 0 ? void 0 : options.getContent) !== 'function') {\n      throw Error('getContent function must be defined');\n    }\n    _this.layer = options === null || options === void 0 ? void 0 : options.layer;\n    _this.getContent = options === null || options === void 0 ? void 0 : options.getContent;\n    _this.container = document.createElement('div');\n    _this.eventShow = _this.layer ? 'mouseenter' : 'mouseover';\n    _this.eventHide = _this.layer ? 'mouseleave' : 'mouseout';\n    _this.node = document.createElement('div');\n    _this.node.classList.add('mapbox-control-tooltip');\n    _this.lngLat = null;\n    _this.cursorStyle = '';\n    _this.show = _this.show.bind(_this);\n    _this.move = _this.move.bind(_this);\n    _this.hide = _this.hide.bind(_this);\n    _this.updatePosition = _this.updatePosition.bind(_this);\n    return _this;\n  }\n  _inherits(TooltipControl, _Base);\n  return _createClass(TooltipControl, [{\n    key: \"show\",\n    value: function show() {\n      this.mapContainer.appendChild(this.node);\n      this.cursorStyle = this.mapCanvas.style.cursor;\n      this.mapCanvas.style.cursor = 'pointer';\n      this.map.on('move', this.updatePosition);\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.node.innerHTML = '';\n      this.mapContainer.removeChild(this.node);\n      this.mapCanvas.style.cursor = this.cursorStyle;\n      this.map.off('move', this.updatePosition);\n    }\n  }, {\n    key: \"move\",\n    value: function move(event) {\n      this.node.innerHTML = this.getContent(event);\n      this.lngLat = event.lngLat;\n      this.updatePosition();\n    }\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      if (!this.lngLat) return;\n      var pos = this.map.project(this.lngLat);\n      this.node.style.left = \"\".concat(pos.x, \"px\");\n      this.node.style.top = \"\".concat(pos.y, \"px\");\n    }\n  }, {\n    key: \"onAddControl\",\n    value: function onAddControl() {\n      this.mapContainer = this.map.getContainer();\n      this.mapCanvas = this.map.getCanvas();\n      if (this.layer) {\n        this.map.on(this.eventShow, this.layer, this.show);\n        this.map.on('mousemove', this.layer, this.move);\n        this.map.on(this.eventHide, this.layer, this.hide);\n      } else {\n        this.map.on(this.eventShow, this.show);\n        this.map.on('mousemove', this.move);\n        this.map.on(this.eventHide, this.hide);\n      }\n    }\n  }, {\n    key: \"onRemoveControl\",\n    value: function onRemoveControl() {\n      if (this.layer) {\n        this.map.off(this.eventShow, this.layer, this.show);\n        this.map.off('mousemove', this.layer, this.move);\n        this.map.off(this.eventHide, this.layer, this.hide);\n      } else {\n        this.map.off(this.eventShow, this.show);\n        this.map.off('mousemove', this.move);\n        this.map.off(this.eventHide, this.hide);\n      }\n      this.hide();\n    }\n  }]);\n}(Base);\nexport { TooltipControl as default };","map":null,"metadata":{},"sourceType":"module"}