{"ast":null,"code":"export var coordinatesGeocoder = function coordinatesGeocoder(query) {\n  var matches = query.match(/^[ ]*(?:Lat: )?(-?\\d+\\.?\\d*)[, ]+(?:Lng: )?(-?\\d+\\.?\\d*)[ ]*$/i);\n  if (!matches) {\n    return null;\n  }\n  function coordinateFeature(lng, lat) {\n    return {\n      center: [lng, lat],\n      geometry: {\n        type: \"Point\",\n        coordinates: [lng, lat]\n      },\n      place_name: \"Lat: \" + lat + \" Lng: \" + lng,\n      place_type: [\"coordinate\"],\n      properties: {},\n      type: \"Feature\"\n    };\n  }\n  var coord1 = Number(matches[1]);\n  var coord2 = Number(matches[2]);\n  var geocodes = [];\n  if (coord1 < -90 || coord1 > 90) {\n    // must be lng, lat\n    geocodes.push(coordinateFeature(coord1, coord2));\n  }\n  if (coord2 < -90 || coord2 > 90) {\n    // must be lat, lng\n    geocodes.push(coordinateFeature(coord2, coord1));\n  }\n  if (geocodes.length === 0) {\n    // else could be either lng, lat or lat, lng\n    geocodes.push(coordinateFeature(coord1, coord2));\n    geocodes.push(coordinateFeature(coord2, coord1));\n  }\n  return geocodes;\n};","map":{"version":3,"names":["coordinatesGeocoder","query","matches","match","coordinateFeature","lng","lat","center","geometry","type","coordinates","place_name","place_type","properties","coord1","Number","coord2","geocodes","push","length"],"sources":["C:/Users/ENhabinde/Desktop/work/New folder/src/modules/mfl/utils/coordinatesGeocoder.js"],"sourcesContent":["export const coordinatesGeocoder = function(query) {\r\n\r\n    const matches = query.match(\r\n      /^[ ]*(?:Lat: )?(-?\\d+\\.?\\d*)[, ]+(?:Lng: )?(-?\\d+\\.?\\d*)[ ]*$/i\r\n    );\r\n    if (!matches) {\r\n      return null;\r\n    }\r\n\r\n    function coordinateFeature(lng, lat) {\r\n      return {\r\n        center: [lng, lat],\r\n        geometry: {\r\n          type: \"Point\",\r\n          coordinates: [lng, lat],\r\n        },\r\n        place_name: \"Lat: \" + lat + \" Lng: \" + lng,\r\n        place_type: [\"coordinate\"],\r\n        properties: {},\r\n        type: \"Feature\",\r\n      };\r\n    }\r\n\r\n    const coord1 = Number(matches[1]);\r\n    const coord2 = Number(matches[2]);\r\n    const geocodes = [];\r\n\r\n    if (coord1 < -90 || coord1 > 90) {\r\n      // must be lng, lat\r\n      geocodes.push(coordinateFeature(coord1, coord2));\r\n    }\r\n\r\n    if (coord2 < -90 || coord2 > 90) {\r\n      // must be lat, lng\r\n      geocodes.push(coordinateFeature(coord2, coord1));\r\n    }\r\n\r\n    if (geocodes.length === 0) {\r\n      // else could be either lng, lat or lat, lng\r\n      geocodes.push(coordinateFeature(coord1, coord2));\r\n      geocodes.push(coordinateFeature(coord2, coord1));\r\n    }\r\n\r\n    return geocodes;\r\n  };"],"mappings":"AAAA,OAAO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAYC,KAAK,EAAE;EAE/C,IAAMC,OAAO,GAAGD,KAAK,CAACE,KAAK,CACzB,gEACF,CAAC;EACD,IAAI,CAACD,OAAO,EAAE;IACZ,OAAO,IAAI;EACb;EAEA,SAASE,iBAAiBA,CAACC,GAAG,EAAEC,GAAG,EAAE;IACnC,OAAO;MACLC,MAAM,EAAE,CAACF,GAAG,EAAEC,GAAG,CAAC;MAClBE,QAAQ,EAAE;QACRC,IAAI,EAAE,OAAO;QACbC,WAAW,EAAE,CAACL,GAAG,EAAEC,GAAG;MACxB,CAAC;MACDK,UAAU,EAAE,OAAO,GAAGL,GAAG,GAAG,QAAQ,GAAGD,GAAG;MAC1CO,UAAU,EAAE,CAAC,YAAY,CAAC;MAC1BC,UAAU,EAAE,CAAC,CAAC;MACdJ,IAAI,EAAE;IACR,CAAC;EACH;EAEA,IAAMK,MAAM,GAAGC,MAAM,CAACb,OAAO,CAAC,CAAC,CAAC,CAAC;EACjC,IAAMc,MAAM,GAAGD,MAAM,CAACb,OAAO,CAAC,CAAC,CAAC,CAAC;EACjC,IAAMe,QAAQ,GAAG,EAAE;EAEnB,IAAIH,MAAM,GAAG,CAAC,EAAE,IAAIA,MAAM,GAAG,EAAE,EAAE;IAC/B;IACAG,QAAQ,CAACC,IAAI,CAACd,iBAAiB,CAACU,MAAM,EAAEE,MAAM,CAAC,CAAC;EAClD;EAEA,IAAIA,MAAM,GAAG,CAAC,EAAE,IAAIA,MAAM,GAAG,EAAE,EAAE;IAC/B;IACAC,QAAQ,CAACC,IAAI,CAACd,iBAAiB,CAACY,MAAM,EAAEF,MAAM,CAAC,CAAC;EAClD;EAEA,IAAIG,QAAQ,CAACE,MAAM,KAAK,CAAC,EAAE;IACzB;IACAF,QAAQ,CAACC,IAAI,CAACd,iBAAiB,CAACU,MAAM,EAAEE,MAAM,CAAC,CAAC;IAChDC,QAAQ,CAACC,IAAI,CAACd,iBAAiB,CAACY,MAAM,EAAEF,MAAM,CAAC,CAAC;EAClD;EAEA,OAAOG,QAAQ;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}