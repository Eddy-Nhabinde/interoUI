{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\ENhabinde\\\\Desktop\\\\work\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport mapboxgl from 'mapbox-gl';\nimport distance from '@turf/distance';\nimport Base from '../Base/Base';\nimport Button from '../Button/Button';\nimport labelFormat from './labelFormat';\nimport lineStringFeature from './lineStringFeature';\nimport pointFeatureCollection from './pointFeatureCollection';\nimport iconRuler from '../icons/ruler';\nvar LAYER_LINE = 'controls-layer-line';\nvar LAYER_SYMBOL = 'controls-layer-symbol';\nvar SOURCE_LINE = 'controls-source-line';\nvar SOURCE_SYMBOL = 'controls-source-symbol';\nvar MAIN_COLOR = '#263238';\nvar HALO_COLOR = '#fff';\nvar RulerControl = /*#__PURE__*/function (_Base) {\n  function RulerControl(options) {\n    var _this;\n    _classCallCheck(this, RulerControl);\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    _this = _callSuper(this, RulerControl);\n    _this.isMeasuring = false;\n    _this.markers = [];\n    _this.coordinates = [];\n    _this.labels = [];\n    _this.units = (_a = options === null || options === void 0 ? void 0 : options.units) !== null && _a !== void 0 ? _a : 'kilometers';\n    _this.font = (_b = options === null || options === void 0 ? void 0 : options.font) !== null && _b !== void 0 ? _b : ['Roboto Medium'];\n    _this.fontSize = (_c = options === null || options === void 0 ? void 0 : options.fontSize) !== null && _c !== void 0 ? _c : 12;\n    _this.fontHalo = (_d = options === null || options === void 0 ? void 0 : options.fontHalo) !== null && _d !== void 0 ? _d : 1;\n    _this.textVariableAnchor = (options === null || options === void 0 ? void 0 : options.textVariableAnchor) || ['top'];\n    _this.textAllowOverlap = (options === null || options === void 0 ? void 0 : options.textAllowOverlap) || false;\n    _this.markerNodeSize = \"\".concat((_e = options === null || options === void 0 ? void 0 : options.markerNodeSize) !== null && _e !== void 0 ? _e : 12, \"px\");\n    _this.markerNodeBorderWidth = \"\".concat((_f = options === null || options === void 0 ? void 0 : options.markerNodeBorderWidth) !== null && _f !== void 0 ? _f : 2, \"px\");\n    _this.labelFormat = (_g = options === null || options === void 0 ? void 0 : options.labelFormat) !== null && _g !== void 0 ? _g : labelFormat;\n    _this.mainColor = (_h = options === null || options === void 0 ? void 0 : options.mainColor) !== null && _h !== void 0 ? _h : MAIN_COLOR;\n    _this.secondaryColor = (_j = options === null || options === void 0 ? void 0 : options.secondaryColor) !== null && _j !== void 0 ? _j : HALO_COLOR;\n    _this.button = new Button();\n    _this.mapClickListener = _this.mapClickListener.bind(_this);\n    _this.styleLoadListener = _this.styleLoadListener.bind(_this);\n    return _this;\n  }\n  _inherits(RulerControl, _Base);\n  return _createClass(RulerControl, [{\n    key: \"insert\",\n    value: function insert() {\n      var _this2 = this;\n      this.addClassName('mapbox-control-ruler');\n      this.button.setIcon(iconRuler());\n      this.button.onClick(function () {\n        if (_this2.isMeasuring) {\n          _this2.measuringOff();\n        } else {\n          _this2.measuringOn();\n        }\n      });\n      this.addButton(this.button);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      this.map.addSource(SOURCE_LINE, {\n        type: 'geojson',\n        data: lineStringFeature(this.coordinates)\n      });\n      this.map.addSource(SOURCE_SYMBOL, {\n        type: 'geojson',\n        data: pointFeatureCollection(this.coordinates, this.labels)\n      });\n      this.map.addLayer({\n        id: LAYER_LINE,\n        type: 'line',\n        source: SOURCE_LINE,\n        paint: {\n          'line-color': this.mainColor,\n          'line-width': 2\n        }\n      });\n      this.map.addLayer({\n        id: LAYER_SYMBOL,\n        type: 'symbol',\n        source: SOURCE_SYMBOL,\n        layout: {\n          'text-field': '{text}',\n          'text-font': this.font,\n          'text-anchor': 'top',\n          'text-size': this.fontSize,\n          'text-offset': [0, 0.8]\n        },\n        paint: {\n          'text-color': this.mainColor,\n          'text-halo-color': this.secondaryColor,\n          'text-halo-width': this.fontHalo\n        }\n      });\n    }\n  }, {\n    key: \"measuringOn\",\n    value: function measuringOn() {\n      this.isMeasuring = true;\n      this.markers = [];\n      this.coordinates = [];\n      this.labels = [];\n      this.map.getCanvas().style.cursor = 'crosshair';\n      this.button.addClassName('-active');\n      this.draw();\n      this.map.on('click', this.mapClickListener);\n      this.map.on('style.load', this.styleLoadListener);\n      this.map.fire('ruler.on');\n    }\n  }, {\n    key: \"measuringOff\",\n    value: function measuringOff() {\n      this.isMeasuring = false;\n      this.map.getCanvas().style.cursor = '';\n      this.button.removeClassName('-active');\n      // remove layers, sources and event listeners\n      this.map.removeLayer(LAYER_LINE);\n      this.map.removeLayer(LAYER_SYMBOL);\n      this.map.removeSource(SOURCE_LINE);\n      this.map.removeSource(SOURCE_SYMBOL);\n      this.markers.forEach(function (m) {\n        return m.remove();\n      });\n      this.map.off('click', this.mapClickListener);\n      this.map.off('style.load', this.styleLoadListener);\n      this.map.fire('ruler.off');\n    }\n  }, {\n    key: \"mapClickListener\",\n    value: function mapClickListener(event) {\n      var _this3 = this;\n      var markerNode = this.getMarkerNode();\n      var marker = new mapboxgl.Marker({\n        element: markerNode,\n        draggable: true\n      }).setLngLat(event.lngLat).addTo(this.map);\n      var newCoordinate = [event.lngLat.lng, event.lngLat.lat];\n      this.coordinates.push(newCoordinate);\n      this.updateLabels();\n      this.updateSource();\n      this.markers.push(marker);\n      this.map.fire('ruler.change', {\n        coordinates: this.coordinates\n      });\n      marker.on('drag', function () {\n        var index = _this3.markers.indexOf(marker);\n        var lngLat = marker.getLngLat();\n        _this3.coordinates[index] = [lngLat.lng, lngLat.lat];\n        _this3.updateLabels();\n        _this3.updateSource();\n      });\n      marker.on('dragend', function () {\n        _this3.map.fire('ruler.change', {\n          coordinates: _this3.coordinates\n        });\n      });\n    }\n  }, {\n    key: \"updateSource\",\n    value: function updateSource() {\n      var lineSource = this.map.getSource(SOURCE_LINE);\n      var symbolSource = this.map.getSource(SOURCE_SYMBOL);\n      lineSource.setData(lineStringFeature(this.coordinates));\n      symbolSource.setData(pointFeatureCollection(this.coordinates, this.labels));\n    }\n  }, {\n    key: \"updateLabels\",\n    value: function updateLabels() {\n      var coordinates = this.coordinates,\n        units = this.units,\n        labelFormat = this.labelFormat;\n      var sum = 0;\n      this.labels = coordinates.map(function (coordinate, index) {\n        if (index === 0) return labelFormat(0);\n        sum += distance(coordinates[index - 1], coordinates[index], {\n          units: units\n        });\n        return labelFormat(sum);\n      });\n    }\n  }, {\n    key: \"getMarkerNode\",\n    value: function getMarkerNode() {\n      var node = document.createElement('div');\n      node.style.width = '12px';\n      node.style.height = '12px';\n      node.style.borderRadius = '50%';\n      node.style.background = this.secondaryColor;\n      node.style.boxSizing = 'border-box';\n      node.style.border = \"2px solid \".concat(this.mainColor);\n      return node;\n    }\n  }, {\n    key: \"styleLoadListener\",\n    value: function styleLoadListener() {\n      this.draw();\n    }\n  }, {\n    key: \"onAddControl\",\n    value: function onAddControl() {\n      this.insert();\n    }\n  }, {\n    key: \"onRemoveControl\",\n    value: function onRemoveControl() {\n      if (this.isMeasuring) this.measuringOff();\n      this.map.off('click', this.mapClickListener);\n    }\n  }]);\n}(Base);\nexport { RulerControl as default };","map":null,"metadata":{},"sourceType":"module"}